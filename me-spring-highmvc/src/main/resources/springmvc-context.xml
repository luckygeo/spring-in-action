<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.3.xsd">

    <!--包的扫描，spring mvc 只扫描@Controller-->

    <!--<context:component-scan use-default-filters="true" />-->
    <!--是否自动检测@Component, @Repository, @Service, or @Controller should be enabled 可用 默认为true-->
    <context:component-scan base-package="me.spring.controller" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>


    <!--使用默认servlet 处理静态资源--><!--后面必须跟上 <mvc:annotation-driven/>-->
    <!--最后的配置如果没有<mvc:annotation-driven/>，那么所有的Controller可能就没有解析，
    所有当有请求时候都没有匹配的处理请求类，就都去<mvc:default-servlet-handler/>即default servlet处理了。
    添加上<mvc:annotation-driven/>后，相应的/请求被Controller处理，而静态资源因为没有相应的Controller就会被default servlet处理。
    总之没有相应的Controller就会被default servlet处理就ok了。-->
    <mvc:default-servlet-handler/>


    <mvc:annotation-driven/>
    <!--This tag registers the DefaultAnnotationHandlerMapping and AnnotationMethodHandlerAdapter beans that are required for spring MVC to dispatch requests to Controllers.
    这个标签注册了Spring MVC分发请求到控制器所必须的DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter实例
    The tag configures those two beans with sensible defaults based on what is present in your classpath.
    标签配置的这2个实例可以根据classpath中的内容默认提供以下功能：
    The defaults are:
    1. Support for Spring 3's Type ConversionService in addition to JavaBeans PropertyEditors during Data Binding.
    A ConversionService instance produced by the org.springframework.format.support.FormattingConversionServiceFactoryBean is used by default.
    This can be overriden by setting the conversion-service attribute.
    支持spring3的javaBeans属性编辑器数据绑定时的类型转换服务。
    类型转换服务实例默认为org.springframework.format.support.FormattingConversionServiceFactoryBean。
    可以覆盖conversion-service属性来指定类型转换服务实例类。
    2. Support for formatting Number fields using the @NumberFormat annotation
    支持@NumberFormat 注解格式化数字类型字段。
    3. Support for formatting Date, Calendar, Long, and Joda Time fields using the @DateTimeFormat annotation, if Joda Time 1.3 or higher is present on the classpath.
    @DateTimeFormat注解格式化 Date, Calendar, Long和 Joda Time（如classpath下存在Joda Time 1.3或更高版本）字段
    4. Support for validating @Controller inputs with @Valid, if a JSR-303 Provider is present on the classpath.
    The validation system can be explicitly configured by setting the validator attribute.
    支持@Valid注解验证控制器数据，classpath中需JSR-303的**。
    可以使用setting明确的配置
    5. Support for reading and writing XML, if JAXB is present on the classpath.
    支持读写xml，classpath中需JAXB 。
    6. Support for reading and writing JSON, if Jackson is present on the classpath.
    支持读写json，classpath中需Jackson 。
    A typical usage is shown below:
    下边是用法：
    <?xml version="1.0" encoding="UTF-8"?>
    <beans xmlns="http://www.springframework.org/schema/beans"
           xmlns:mvc="http://www.springframework.org/schema/mvc"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">
             JSR-303 support will be detected on classpath and enabled automatically &ndash;&gt;
        <mvc:annotation-driven/>
    </beans>-->

   <!--@EnableWebMvc 等同于 mvc:annotation-driven 在XML中. 它能够为使用@RequestMapping向特定的方法传入的请求映射@Controller-annotated 类。
   @ComponentScan 等同于 context:component-scan base-package="..." 提供 spring 在哪里寻找 管理 beans/classes.-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.support.StandardServletMultipartResolver">
        <!--	支持的其中一个属性，支持的最大文件大小，以字节为单位	-->
        <!--<property name="maxUploadSize" value="100000"/>
        <property name="defaultEncoding" value="utf-8"/>
        <property name="maxInMemorySize" value="4000"/>-->

    </bean>


</beans>